{"version":3,"sources":["authProvider.js","App.js","serviceWorker.js","index.js"],"names":["authProvider","type","params","AUTH_LOGIN","username","password","request","Request","concat","apiWebsite","method","body","JSON","stringify","email","headers","Headers","Content-Type","fetch","then","response","status","Error","statusText","json","_ref","token","localStorage","setItem","window","location","replace","AUTH_LOGOUT","removeItem","AUTH_ERROR","Promise","reject","AUTH_CHECK","getItem","resolve","fetchHeaders","Authorization","fetchHydra","url","options","arguments","length","undefined","baseFetchHydra","Object","objectSpread","dataProvider","api","hydraClient","apiDocumentationParser","entrypoint","parseHydraDocumentation","result","customRoutes","props","path","render","react_default","a","createElement","es","to","Boolean","hostname","match","ReactDOM","lib","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4VAMeA,EAAA,SAACC,EAAMC,GAClB,OAAQD,GACJ,KAAKE,IAAL,IACYC,EAAuBF,EAAvBE,SAAUC,EAAaH,EAAbG,SACZC,EAAU,IAAIC,QAAJ,GAAAC,OANVC,4CAMsC,CACxCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEC,MAAOV,EAAUC,aACxCU,QAAS,IAAIC,QAAQ,CAAEC,eAAgB,uBAG3C,OAAOC,MAAMZ,GACRa,KAAK,SAAAC,GACF,GAAIA,EAASC,OAAS,KAAOD,EAASC,QAAU,IAAK,MAAM,IAAIC,MAAMF,EAASG,YAE9E,OAAOH,EAASI,SAEnBL,KAAK,SAAAM,GAAe,IAAZC,EAAYD,EAAZC,MACLC,aAAaC,QAAQ,QAASF,GAC9BG,OAAOC,SAASC,QAAQ,OAGpC,KAAKC,IACDL,aAAaM,WAAW,SACxB,MAEJ,KAAKC,IACD,GAAI,MAAQhC,EAAOmB,QAAU,MAAQnB,EAAOmB,OAGxC,OAFAM,aAAaM,WAAW,SAEjBE,QAAQC,SAEnB,MAEJ,KAAKC,IACD,OAAOV,aAAaW,QAAQ,SAAWH,QAAQI,UAAYJ,QAAQC,SAEvE,QACI,OAAOD,QAAQI,oBCKrBC,EAAe,CAACC,cAAA,UAAAjC,OAA2BqB,OAAOF,aAAaW,QAAQ,WACvEI,EAAa,SAACC,GAAD,IAAMC,EAANC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAgB,GAAhB,OAAuBG,qBAAeL,EAADM,OAAAC,EAAA,EAAAD,CAAA,GACjDL,EADiD,CAEpD7B,QAAS,IAAIC,QAAQwB,OAEnBW,EAAe,SAAAC,GAAG,OAAIC,sBAAYD,EAAKV,IACvCY,EAAyB,SAAAC,GAAU,OAAIC,IAAwBD,EAAY,CAAExC,QAAS,IAAIC,QAAQwB,KACnGrB,KACG,SAAAM,GAAA,MAAc,CAAE2B,IAAhB3B,EAAG2B,MACH,SAACK,GACG,OAAQA,EAAOpC,QACX,KAAK,IACD,OAAOc,QAAQI,QAAQ,CACnBa,IAAKK,EAAOL,IACZM,aAAc,CAAC,CACXC,MAAO,CACHC,KAAM,IACNC,OAAQ,kBAAMC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,GAAE,iBAKlD,QACI,OAAO/B,QAAQC,OAAOqB,OC3DdU,QACW,cAA7BtC,OAAOC,SAASsC,UAEe,UAA7BvC,OAAOC,SAASsC,UAEhBvC,OAAOC,SAASsC,SAASC,MACvB,2DCZNC,IAAST,OAAOC,EAAAC,EAAAC,cFsED,SAAAL,GAAK,OAChBG,EAAAC,EAAAC,cAACO,EAAA,WAAD,CACJjB,uBAAwBA,EACxBtD,aAAcA,EACduD,WAjCmB9C,mCAkCnB0C,aAAcA,KE3EE,MAASqB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzD,KAAK,SAAA0D,GACjCA,EAAaC","file":"static/js/main.b5a4eeca.chunk.js","sourcesContent":["import { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from 'react-admin';\n\n// Change this to be your own login check route.\nconst apiWebsite = 'http://kinders.arnapou.local';\nconst login_uri = apiWebsite + '/login_check';\n\nexport default (type, params) => {\n    switch (type) {\n        case AUTH_LOGIN:\n            const { username, password } = params;\n            const request = new Request(`${login_uri}`, {\n                method: 'POST',\n                body: JSON.stringify({ email: username, password }),\n                headers: new Headers({ 'Content-Type': 'application/json' }),\n            });\n\n            return fetch(request)\n                .then(response => {\n                    if (response.status < 200 || response.status >= 300) throw new Error(response.statusText);\n\n                    return response.json();\n                })\n                .then(({ token }) => {\n                    localStorage.setItem('token', token); // The JWT token is stored in the browser's local storage\n                    window.location.replace('/');\n                });\n\n        case AUTH_LOGOUT:\n            localStorage.removeItem('token');\n            break;\n\n        case AUTH_ERROR:\n            if (401 === params.status || 403 === params.status) {\n                localStorage.removeItem('token');\n\n                return Promise.reject();\n            }\n            break;\n\n        case AUTH_CHECK:\n            return localStorage.getItem('token') ? Promise.resolve() : Promise.reject();\n\n        default:\n            return Promise.resolve();\n    }\n}","// import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n//\n// class App extends Component {\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <p>\n//             Edit <code>src/App.js</code> and save to reload.\n//           </p>\n//           <a\n//             className=\"App-link\"\n//             href=\"https://reactjs.org\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn React\n//           </a>\n//         </header>\n//       </div>\n//     );\n//   }\n// }\n//\n// export default App;\n\n// import React, { Component } from 'react';\n// import { HydraAdmin } from '@api-platform/admin';\n//\n// class App extends Component {\n//     render() {\n//         return <HydraAdmin entrypoint=\"http://kinders.arnapou.local/api/\"/> // Replace with your own API entrypoint\n//     }\n// }\n//\n// export default App;\n\nimport React from 'react';\nimport parseHydraDocumentation from '@api-platform/api-doc-parser/lib/hydra/parseHydraDocumentation';\nimport { HydraAdmin, hydraClient, fetchHydra as baseFetchHydra } from '@api-platform/admin';\nimport authProvider from './authProvider';\nimport { Redirect } from 'react-router-dom';\n\nconst apiWebsite = 'http://kinders.arnapou.local';\nconst entrypoint = apiWebsite + '/api'; // Change this by your own entrypoint\nconst fetchHeaders = {'Authorization': `Bearer ${window.localStorage.getItem('token')}`};\nconst fetchHydra = (url, options = {}) => baseFetchHydra(url, {\n    ...options,\n    headers: new Headers(fetchHeaders),\n});\nconst dataProvider = api => hydraClient(api, fetchHydra);\nconst apiDocumentationParser = entrypoint => parseHydraDocumentation(entrypoint, { headers: new Headers(fetchHeaders) })\n    .then(\n        ({ api }) => ({ api }),\n        (result) => {\n            switch (result.status) {\n                case 401:\n                    return Promise.resolve({\n                        api: result.api,\n                        customRoutes: [{\n                            props: {\n                                path: '/',\n                                render: () => <Redirect to={`/login`}/>,\n                    },\n            }],\n        });\n\n        default:\n            return Promise.reject(result);\n        }\n        },\n    );\n\nexport default props => (\n    <HydraAdmin\napiDocumentationParser={apiDocumentationParser}\nauthProvider={authProvider}\nentrypoint={entrypoint}\ndataProvider={dataProvider}\n/>\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}